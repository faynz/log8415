#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt]
#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{graphicx,multirow}
#+LATEX_HEADER: \usepackage{caption}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage{subfig}
#+LATEX_HEADER: \usepackage{placeins}

#+LATEX_HEADER: \captionsetup{font=bf,belowskip=8pt}

#+OPTIONS: toc:nil
#+BEGIN_SRC latex

\begin{document}
\begin{titlepage}
  \newcommand{\HRule}{\rule{\linewidth}{0.5mm}}
  \center
  \textsc{\LARGE Polytechnique Montr√©al}\\[1.5cm]
  \textsc{\Large LOG8415 : Lab 2}\\[0.5cm]
  \textsc{\large Advanced Concepts in Cloud Computing}\\[0.5cm]
  \HRule\\[0.4cm]
          {\huge\bfseries MapReduce with Hadoop and Spark on AWS}\\[0.4cm]
          \HRule\\[1.5cm]
                  {\large\textit{Authors}}\\
                  Yanis \textsc{Toubal} (1960266)\\
                  Guy-Hermann \textsc{Adiko} (2005119)\\
                  Estefan \textsc{Vega-Calcada} (1934346)\\
                  \vfill\vfill\vfill {\large\today} \vfill\vfill
                  \includegraphics{poly_logo.png}\\[1cm]
                  \vfill
\end{titlepage}

\tableofcontents
\pagebreak

\section{Abstract}
\paragraph{}

When dealing with Big Data, we can choose from a variety of softwares to manage the data sets. A modern, scalable and cost-effective solution is to use software such as Apache Hadoop or Apache Spark to efficiently split the workload across a network of computers (\textit{"nodes"}) and therefore lower the execution time of large tasks. In this paper, we will explore both softwares and compare their differences and evaluate their performances by conducting a few experiments.

\paragraph{Keywords:}Amazon Elastic Compute Cloud, Benchmark, Instance Performance, Cloud Application, MapReduce, Hadoop, Spark, Big Data, AWS
\pagebreak

\section{Introduction} \label{sec:introduction}
\paragraph{} In this laboratory, we had the opportunity to explore the MapReduce paradigm. We successfully compared the performance of the algorithm on Linux, Hadoop and Spark with different experiments. At first, we compared their performances in a simple WordCount program and observed the differences. The WordCount program simply counts the occurrence of every single word in a document. We ran it all on AWS, Amazon's cloud computing platform, by creating an EC2 instance.
Then, we used Hadoop and MapReduce to solve a social networking problem and process bigger data sets. The goal is to suggest friendships based on their connection (A.K.A People You May Know Algorithm).
\bigskip

\noindent This paper presents some of our experiments with a WordCount program (section ~\ref{sec:WordCount}), the results of our performance comparison between Hadoop and Linux (section ~\ref{sec:HadoopVsLinux}), the results of our performance comparison between Hadoop and Spark (section ~\ref{sec:HadoopVsSpark}) and our solution to the MapReduce program that implements the \textit{People You
  Might Know} social network friendship recommendation algorithm (section ~\ref{sec:MapReduceDescription} and section ~\ref{sec:MapReduceAlgorithm}). All the code presented in this report can be found on our GitHub repository. The link is provided in the Annex (section ~\ref{sec:Annex}).

\section{Experiments with WordCount program} \label{sec:WordCount}

\paragraph{} We implemented our own version of a WordCount program in Java. In the two following sections (section ~\ref{sec:HadoopVsLinux} and ~\ref{sec:HadoopVsSpark}), we present the performances of our program using Linux, Hadoop and Spark. The code we used for our Apache Spark program is inspired from Cloudera's solution \cite{4} and the one we used for our Apache Hadoop program is inspired by the examples from Hadoop's official documentation \cite{5}.

\section{Performance comparison of Hadoop vs Linux} \label{sec:HadoopVsLinux}

\begin{center}
  \captionof{figure}{Comparison between Hadoop and Linux for the 9 texts}
  \includegraphics[width=\linewidth]{./images/hadoop-linux.png}
\end{center}

\begin{center}
  \captionof{table}{Comparison between Hadoop and Linux for the 9 texts} \label{tab:regression_analysis_summary}
  \begin{tabular}{|*{3}{c|}}
    \hline
    \textbf{Document} & \textbf{Hadoop time (in s)} & \textbf{Linux time (in s)} \\
    \hline
    buchanj-midwinter-00-t.txt & 6.608 & 0.172 \\
    \hline
    carman-farhorizons-00-t.txt & 5.512 & 0.016 \\
    \hline
    colby-champlain-00-t.txt & 6.216 & 0.076 \\
    \hline
    cheyneyp-darkbahama-00-t.txt & 8.720 & 0.212 \\
    \hline
    delamare-bumps-00-t.txt & 8.288 & 0.028 \\
    \hline
    charlesworth-scene-00-t.txt & 5.136 & 0.132\\
    \hline
    delamare-lucy-00-t.txt & 4.936 & 0.028\\
    \hline
    delamare-myfanwy-00-t.txt & 5.004 & 0.020\\
    \hline
    delamare-penny-00-t.txt & 4.544 & 0.012 \\
    \hline
  \end{tabular}
\end{center}

\subsection{Results}
\paragraph{} The results show that our local Linux machine outperformed Hadoop by alot. This can be explained by the fact Hadoop is meant to process very large data sets. In this scenario, we are dealing with pretty small data sets, that is why our local Linux easily outperformed Hadoop. We would expect Hadoop to perform much better than our local Linux machine if we were dealing with larger data sets, such as the \textit{People You May Know} algorithm ~\ref{sec:MapReduceDescription}.

\section{Performance comparison of Hadoop vs Spark on AWS} \label{sec:HadoopVsSpark}

\paragraph{} For this experimentation, we leveraged AWS EC2 instances. As for the instance type, we used t3.xlarge which enables 4 vCPUs and 16 GiB of Memory. Below is the report for performance of Hadoop vs Spark. Basically, Spark outperforms Hadoop as we can see in the graph. To properly evaluate both Hadoop and Spark, we ran the WordCount three times on each machine and took the average time for both. In the following table (Table 2: Comparison between Hadoop and Spark for the 9 texts), we only show the average and not the individual results of each execution to avoid overloading this report. We also presented the data in a plot for a more visual comparison.

\bigskip

We used to time command in to measure the time it took to execute the wordcount program on each system:
\begin{itemize}
\item[--] Hadoop: time hadoop \dots
\item[--] Apache Spark : time spark-submit \dots
\end{itemize}

\pagebreak

\begin{center}
  \captionof{figure}{Comparison between Hadoop and Spark for the 9 texts}
  \includegraphics[width=\linewidth]{./images/hadoop-spark.png}
\end{center}

\begin{center}
  \captionof{table}{Comparison between Hadoop and Spark for the 9 texts} \label{tab:regression_analysis_summary}
  \begin{tabular}{|*{3}{c|}}
    \hline
    \textbf{Document} & \textbf{Hadoop time (in s)} & \textbf{Spark time (in s)} \\
    \hline
    buchanj-midwinter-00-t.txt & 12.15 & 12.51 \\
    \hline
    carman-farhorizons-00-t.txt & 13.38 & 12.29 \\
    \hline
    colby-champlain-00-t.txt & 12.97 & 11.71 \\
    \hline
    cheyneyp-darkbahama-00-t.txt & 15.88 & 11.50 \\
    \hline
    delamare-bumps-00-t.txt & 12.18 & 12.12 \\
    \hline
    charlesworth-scene-00-t.txt & 12.7 & 11.81 \\
    \hline
    delamare-lucy-00-t.txt & 13.26 & 11.96 \\
    \hline
    delamare-myfanwy-00-t.txt & 13.59 & 12.53 \\
    \hline
    delamare-penny-00-t.txt & 13.31 & 12.44 \\
    \hline
  \end{tabular}
\end{center}

\subsection{Results}

\paragraph{} We began to experiment with the assumption that Spark would outperform Hadoop due to the fact Apache Spark processes the data in-memory instead of disk after performing a MapReduce. The previous table did not show us what we expected. In fact, we believed Spark would be at least two times faster than Hadoop. When dealing with Big Data, Spark's performance could spike up to three times faster according to Goran Jevtic \cite{1} and according to IBM, Apache Spark can be up to 100 times faster when dealing with smaller workloads \cite{2}. These results could therefore be explained by the fact we aren't dealing with Big Data. Also, the times we obtained might include Spark's warmup phase and therefore is not representative of the actual processing time differences between Hadoop and Spark.

\section{Description of MapReduce jobs to solve the social network problem} \label{sec:MapReduceDescription}
\paragraph{}
For the social network problem, we need an algorithm that recommends friends for each user. More particularly, It needs to find the top 10 of new friends recommendation based on the number of mutual friends. Based on the information given, we can conclude that a MapReduce approach to this problem is very much possible since there is a high amount of data involved (big data) and since this problem is very much parallelizable with the right approach.

\bigskip

Our approach was that for each user we wanted the key-value pair to contain the user as the key and a recommended friend as the value. To achieve this, here is how we separated the map and the reduce part.

\bigskip

\begin{center}
  \begin{minipage}{.7\linewidth}
    \textbf{Note}: The following code runs Hadoop in standalone mode, therefore we only use a single node to execute the program. Performances may vary depending on the user's computer. The average execution time was around one minute.
  \end{minipage}
\end{center}

\subsection{Map}
\paragraph{}
For the map part, the idea was to represent two types of relationships between the users which are a relationship of friendship (already friends) and a relationship of potential friend recommendation. Here we use potential because at this stage we can't know if the two users are already friends or not. This verification will be done during the reduce part. For this problem, the friends of the current user are represented by a friendship relationship since they are already friends. As for the potential friends, they are simply represented by the pairs of permutations between the friends of the current user. As an example, if user 0 has friends {1,2,3}, the potential friends are (1,2) (2,1) (1,3) (3,1) (2,3) (3,2). Since each map process uses as an input one user and it's friend, which are represented by a line of input text file, it's easy to scale up by using, for example, one worker per line of text.

\subsection{Reduce}
\paragraph{}
The reduce part is where most of the work happens in this situation. The idea here is to separate, for the current user, the users that are already friends with him and the users that are recommended as new friends. For the users that are already friends with the user, they are going to be ignored. As for the users that are recommended as new friends, they will be stocked along with the number of mutual friends between them and the current user. The number of mutual friends is given by incrementing everytime there is an occurrence of the recommended user (1 per mutual friend). Finally, the 10 top users with the most mutual friends with the current user will be displayed.

\pagebreak

\section{Algorithm description} \label{sec:MapReduceAlgorithm}

\subsection{Main}
\paragraph{}
The main class is very straightforward. It defines the configuration of the Hadoop Job that will be run. This includes the Mapper class, the Reducer class, the input, the output and more.

\begin{center}
  \captionof{figure}{Main class PeopleYouMayKnow.java}
  \includegraphics[width=\linewidth]{./images/6-main.png}
\end{center}

\subsection{Map}
\begin{enumerate}
\item The mapper takes the line of input from the input file and separates the current user (key) and it's friends (value).

\item An iteration is done through it's friend list and the program output the current user and his friend with an \textit{already friend} relationship. The output is a key-value pair with the current user as key and a FriendRelation (see below) as the value.

\item After that, the program finds all the \textbf{unique pairs of permutations} between the friends of the current user and output a potential recommended friend for each permutation. The output is then a friend of the current user as a key and a FriendRelation as the value.
\end{enumerate}

\pagebreak

\begin{center}
  \captionof{figure}{Mapper class Mapper.java}
  \includegraphics[width=\linewidth]{./images/6-map.png}
\end{center}

\subsection{FriendRelation}
\paragraph{}
This class is used as the output (value of the key-value pair) of the Mapper. It defines a user with it's relationship with the current user (defined in the key of the key-value pair). For example the key-value pair {1, (2, -1)} could be interpreted as \textit{user 1 is already friend with user 2}.

\begin{center}
  \captionof{figure}{FriendRelation class FriendRelation.java}
  \includegraphics[width=\linewidth]{./images/6-friendrelation.png}
\end{center}

\subsection{Reduce}
\begin{enumerate}
\item The reducer takes all the FriendRelation received from the current user (defined in the key) and iterates over all of them. As mentionned before, if the relationship value in the FriendRelation is -1 then the users are already friends. In that case we put the user in a separate array (currentFriends ArrayList). If it's not -1 then they are potential friends if the other user isn't in the friends array. We then either add the new potential friend in the map (friendsRecommendation HashMap) with a value of 1 or we increment the value by 1. As previously mentionned, this value represents the number of mutual friends between the current user and the other user.

\item The next step is to take the map containing potential friends and to sort it in descending order of the number of mutual friends (value of the map). A TreeSet with a custom comparator was used for that purpose. The custom comparator first compares the value of 2 elements and then, if the values are equal, it compares the user id and prioritizes the smaller one.

\item The last step is to take the first 10 ordered recommended friends by ignoring those who are already friends with the current user. Each recommendation is added to the result that will be outputed.
\end{enumerate}

\pagebreak

\begin{center}
  \captionof{figure}{Reducer class Reducer.java}
  \includegraphics[width=0.9\linewidth]{./images/6-reduce.png}
\end{center}

\begin{center}
  \includegraphics[width=0.9\linewidth]{./images/6-reduce2.png}
\end{center}

\section{Recommendations of connection for some users}

\paragraph{} By looking at the output file provided by the Hadoop MapReduce job, here are the results we found for the requested users:

\bigskip
\begin{center}
  \begin{minipage}{.7\linewidth}
    924  \hspace{0.9cm}  439, 2409, 6995, 11860, 15416, 43748, 45881 \\
    8941 \hspace{0.7cm}  8943, 8944, 8940 \\
    8942 \hspace{0.7cm}  8939, 8940, 8943, 8944 \\
    9019 \hspace{0.7cm}  9022, 317, 9023 \\
    9020 \hspace{0.7cm}  9021, 9016, 9017, 9022, 317, 9023 \\
    9021 \hspace{0.7cm}  9020, 9016, 9017, 9022, 317, 9023 \\
    9022 \hspace{0.7cm}  9019, 9020, 9021, 317, 9016, 9017, 9023 \\
    9990 \hspace{0.7cm}  13134, 13478, 13877, 34299, 34485, 34642, 37941 \\
    9992 \hspace{0.7cm}  9987, 9989, 35667, 9991 \\
    9993 \hspace{0.7cm}  9991, 13134, 13478, 13877, 34299, 34485, 34642, 37941 \\
  \end{minipage}
\end{center}

\section{Instructions to run the code} \label{sec:RunningTheCode}

\subsection{WordCount on Spark}
\begin{enumerate}
\item Install Spark 3.2.0 and Maven
\item Create a new directory (e.g. sparkwordcount) which will include the SparkWordCount.scala program
\item Copy-paste the pom.xml file (available in the git repository) in the \textit{sparkwordcount} directory and generate the application jar by running the following command in that same directory:

  \begin{center} \textit{\$ mvn package} \end{center}

  \textbf{Note}: this will generate a file named \textit{sparkwordcount-0.0.1-SNAPSHOT.jar} in a new directory named \textit{target} (e.g. ./sparkwordcount/target)

\item Launch the SparkWordCount.scala script from its directory (~/tp2/wordcount) by typing the following command:
  \bigskip
  \begin{center}
    \begin{minipage}{.7\linewidth}
      \textit{\$ time spark-submit -{}-class SparkWordCount \textbackslash \\ YOUR\_LINK/target/sparkwordcount-0.0.1-SNAPSHOT.jar \textbackslash \\  YOUR\_LINK/YOUR\_FILE.txt}
    \end{minipage}
  \end{center}
\end{enumerate}

\subsection{PeopleYouMayKnow}

\bigskip The link for the git repo that contains the code is:
\url{https://github.com/ytoubal/SocialMediaProblem}

\bigskip \noindent Running the code with the jar file is the easiest way to run the code without even needing Hadoop configured in the environment. The only requirement is Java to run the jar file and a Linux Distribution.

\bigskip \noindent The jar file is located in the \textbf{out/artifacts/PeopleYouMayKnow\_jar/} directory and the command to run it is simply:

\bigskip \textit{java -jar PeopleYouMayKnow.jar path/to/input/file path/to/output/directory}

\section{Conclusion} \label{sec:Conclusion}
\paragraph{}
In conclusion, this study helped us achieve a deeper understanding of Big Data and how to use software such as Hadoop and Spark to solve intricate data problems. We experimented with simple programs such as a WordCount program and used that knowledge to solve a more complex social networking problem (\textit{People You Might Know Algorithm}). We measured the performances of Hadoop and Spark's software and were able to conclude that in fact Spark operates at a much faster pace than Hadoop. The understanding of these softwares is primordial in today‚Äôs world to achieve optimal performances when dealing with large data sets and complex data problems, At last, we are content with the outcome of this assignment. The next step would be to create an application using Apache Spark and see how it performs.

\begin{thebibliography} {}
\bibitem{1} Goran Jevtic. (2020) Hadoop vs Spark -- Detailed Comparison. [Online] \\  Available: \url{https://phoenixnap.com/kb/hadoop-vs-spark#ftoc-heading-4}
\bibitem{2} IBM Cloud Education. (2021) Hadoop vs. Spark: What's the Difference? [Online] \\ Available: \url{https://www.ibm.com/cloud/blog/hadoop-vs-spark}
\bibitem{3} Edureka! . (2021) MapReduce Tutorial -- Fundamentals of MapReduce [Online] \\ Available: \url{https://www.edureka.co/blog/mapreduce-tutorial/}
\bibitem{4} Cloudera. (2021) Developing and running an Apache Spark WordCount application [Online] \\ Available: \url{https://docs.cloudera.com/runtime/7.2.10/developing-spark-applications/topics/spark-develop-run-wordcount-app.html}
\bibitem{5} The Apache Software Foundation. (2021) Apache Hadoop -- MapReduce Tutorial [Online] \\ Available:\url{https://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html}
\end{thebibliography}

\section{Annex} \label{sec:Annex}
Link to the git repository: \\  \url{https://github.com/ytoubal/MapReduce-with-Hadoop-and-Spark-on-AWS}
\end{document}
#+END_SRC
#+end_export
